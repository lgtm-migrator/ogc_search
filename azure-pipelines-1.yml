# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python36:
      PYTHON_VERSION: '3.6'
    Python37:
      PYTHON_VERSION: '3.7'
    Python38:
      PYTHON_VERSION: "3.8"
  maxParallel: 3

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(PYTHON_VERSION)'
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    python -m pip install --upgrade pip setuptools wheel
    pip install -r requirements.txt
    pip install unittest-xml-reporting
  displayName: 'Install prerequisites'

- script: |
    cp ogc_search/ogc_search/settings.sample.py ogc_search/ogc_search/settings.py
  displayName: 'Copy test settings file'

- script: |
    pushd '$(projectRoot)'
    python manage.py test open_data.tests --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'
  condition: succeededOrFailed()

- script: |
    pip download -d $(Build.ArtifactStagingDirectory)/Staging/Dependencies -r requirements.txt
  displayName: 'Download Dependencies for Offline Install'


- task: DownloadGitHubRelease@0
  inputs:
    connection: 'thriuin'
    userRepository: 'ogc_search'
    defaultVersionType: 'latest'
    downloadPath: '$(Build.ArtifactStagingDirectory)/Staging'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/Staging' 
    includeRootFolder: true
    archiveType: 'tar'
    tarCompression: 'gz'
    archiveFile: '$(Build.ArtifactStagingDirectory)/OfflinePackage/OGC_Search_DeploymentPackage.tar.gz' 
    replaceExistingArchive: true 
  displayName: 'Create OfflinePackage (tarball)'


- task: PublishPipelineArtifact@0
  inputs:
    artifactName: 'OfflinePackage'
    targetPath: '$(Build.ArtifactStagingDirectory)/OfflinePackage'
  displayName: 'Upload OfflinePackage to Artifacts'